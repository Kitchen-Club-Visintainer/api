package br.com.kitchen.club.controller;import br.com.kitchen.club.bases.BaseController;import br.com.kitchen.club.dto.ingredientes.IngredientesDto;import br.com.kitchen.club.dto.ingredientes.IngredientesShallowDto;import br.com.kitchen.club.entity.Ingredientes;import br.com.kitchen.club.service.IngredientesService;import jakarta.validation.Valid;import jdk.jshell.spi.ExecutionControl.NotImplementedException;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.ArrayList;import java.util.List;@RestController@RequestMapping("/ingredientes")public class IngredientesController extends BaseController<Ingredientes, IngredientesDto, IngredientesShallowDto, IngredientesService> {    private final IngredientesService service;    public IngredientesController(IngredientesService service) {        this.service = service;    }    @Override    public ResponseEntity<List<IngredientesShallowDto>> listAll() {        var shallowDto = service.buscarTodosIngredientes();        return new ResponseEntity<>(shallowDto, HttpStatus.OK);    }    @Override    public ResponseEntity<IngredientesDto> listById(@PathVariable Long id) {        var ing = service.buscarIngredienteCadastradoPorId(id);        var ingredientesDto = new IngredientesDto(ing.getNome(), ing.getValorNutricional(), ing.getGrupoAlimentar().name());        return new ResponseEntity<>(ingredientesDto, HttpStatus.OK);    }    @Override    public ResponseEntity<String> createNew(@RequestBody IngredientesDto request) throws NotImplementedException {        var ingredientes = service.cadastrarIngrediente(request);        return new ResponseEntity<>(ingredientes.toString(), HttpStatus.CREATED);    }    @PostMapping    public ResponseEntity<Ingredientes> cadastrarIngrediente(@RequestBody IngredientesDto request) {        var ingredientes = service.cadastrarIngrediente(request);        return new ResponseEntity<>(ingredientes, HttpStatus.CREATED);    }    @PostMapping(value = "/list")    public ResponseEntity<List<Ingredientes>> cadastrarVariosIngredientes(@RequestBody @Valid List<IngredientesDto> request) {        List<Ingredientes> listaIngredientes = new ArrayList<>();        request.forEach(ingredientesDto -> {            var ingrediente = service.cadastrarIngrediente(ingredientesDto);            listaIngredientes.add(ingrediente);        });        return new ResponseEntity<>(listaIngredientes, HttpStatus.CREATED);    }    @Override    public ResponseEntity<String> update(@RequestBody @Valid IngredientesDto ingredientesDto) {        var ingrediente = service.atualizarIngrediente(ingredientesDto);        return new ResponseEntity<>(ingrediente.toString(), HttpStatus.ACCEPTED);    }    @Override    protected IngredientesService getEntityService() {        return service;    }}